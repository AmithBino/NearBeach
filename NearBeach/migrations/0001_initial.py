# Generated by Django 4.1.4 on 2023-01-04 09:36

import NearBeach.private_media
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Campus",
            fields=[
                ("campus_id", models.AutoField(primary_key=True, serialize=False)),
                ("campus_nickname", models.CharField(max_length=100)),
                (
                    "campus_phone",
                    models.CharField(blank=True, default="", max_length=20, null=True),
                ),
                (
                    "campus_fax",
                    models.CharField(blank=True, default="", max_length=20, null=True),
                ),
                (
                    "campus_address1",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                (
                    "campus_address2",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                (
                    "campus_address3",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                ("campus_suburb", models.CharField(max_length=50)),
                (
                    "campus_postcode",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "campus_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=13, max_digits=16, null=True
                    ),
                ),
                (
                    "campus_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=13, max_digits=16, null=True
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "campus",
            },
        ),
        migrations.CreateModel(
            name="ChangeTask",
            fields=[
                ("change_task_id", models.AutoField(primary_key=True, serialize=False)),
                ("change_task_title", models.CharField(max_length=255)),
                (
                    "change_task_description",
                    models.TextField(blank=True, default="", null=True),
                ),
                ("change_task_start_date", models.DateTimeField()),
                ("change_task_end_date", models.DateTimeField()),
                ("change_task_seconds", models.BigIntegerField(default=0)),
                (
                    "change_task_required_by",
                    models.CharField(default="Stakeholder(s)", max_length=255),
                ),
                (
                    "change_task_status",
                    models.IntegerField(
                        choices=[
                            (1, "Draft"),
                            (2, "Waiting for approval"),
                            (3, "Approved"),
                            (4, "Started"),
                            (5, "Finished"),
                            (6, "Rejected"),
                        ]
                    ),
                ),
                ("is_downtime", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_task_assigned_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_assigned_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "change_task_qa_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_qa_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "change_task",
            },
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                ("customer_id", models.AutoField(primary_key=True, serialize=False)),
                ("customer_first_name", models.CharField(max_length=50)),
                ("customer_last_name", models.CharField(max_length=50)),
                ("customer_email", models.CharField(max_length=200)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "customer",
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "document_key",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("document_description", models.CharField(max_length=255)),
                (
                    "document_url_location",
                    models.TextField(blank=True, default="", null=True),
                ),
                (
                    "document",
                    models.FileField(
                        blank=True,
                        null=True,
                        storage=NearBeach.private_media.FileStorage(),
                        upload_to="",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "document",
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("group_id", models.AutoField(primary_key=True, serialize=False)),
                ("group_name", models.CharField(max_length=50)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.group",
                    ),
                ),
            ],
            options={
                "db_table": "group",
            },
        ),
        migrations.CreateModel(
            name="KanbanBoard",
            fields=[
                (
                    "kanban_board_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("kanban_board_name", models.CharField(max_length=255)),
                (
                    "kanban_board_status",
                    models.CharField(
                        choices=[("Open", "Open"), ("Closed", "Closed")],
                        default="Open",
                        max_length=10,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "kanban_board",
            },
        ),
        migrations.CreateModel(
            name="KanbanCard",
            fields=[
                ("kanban_card_id", models.AutoField(primary_key=True, serialize=False)),
                ("kanban_card_text", models.CharField(max_length=255)),
                ("kanban_card_description", models.TextField(blank=True, default="")),
                ("kanban_card_sort_number", models.IntegerField()),
                ("is_archived", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "kanban_board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.kanbanboard",
                    ),
                ),
            ],
            options={
                "db_table": "kanban_card",
            },
        ),
        migrations.CreateModel(
            name="ListOfCountry",
            fields=[
                (
                    "country_id",
                    models.CharField(max_length=2, primary_key=True, serialize=False),
                ),
                ("country_name", models.CharField(max_length=50)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_country",
            },
        ),
        migrations.CreateModel(
            name="ListOfRequirementItemStatus",
            fields=[
                (
                    "requirement_item_status_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("requirement_item_status", models.CharField(max_length=100)),
                ("status_is_closed", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_requirement_item_status",
            },
        ),
        migrations.CreateModel(
            name="ListOfRequirementItemType",
            fields=[
                (
                    "requirement_item_type_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("requirement_item_type", models.CharField(max_length=100)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_requirement_item_type",
            },
        ),
        migrations.CreateModel(
            name="ListOfRequirementStatus",
            fields=[
                (
                    "requirement_status_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("requirement_status", models.CharField(max_length=50)),
                ("requirement_status_is_closed", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_requirement_status",
            },
        ),
        migrations.CreateModel(
            name="ListOfRequirementType",
            fields=[
                (
                    "requirement_type_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("requirement_type", models.CharField(max_length=100)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_requirement_type",
            },
        ),
        migrations.CreateModel(
            name="ListOfRFCStatus",
            fields=[
                ("rfc_status_id", models.AutoField(primary_key=True, serialize=False)),
                ("rfc_status", models.CharField(max_length=100)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_rfc_status",
            },
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "organisation_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("organisation_name", models.CharField(max_length=255)),
                ("organisation_website", models.CharField(max_length=50)),
                ("organisation_email", models.CharField(max_length=100)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organisation_profile_picture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.document",
                    ),
                ),
            ],
            options={
                "db_table": "organisation",
            },
        ),
        migrations.CreateModel(
            name="PermissionSet",
            fields=[
                (
                    "permission_set_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("permission_set_name", models.CharField(max_length=255)),
                (
                    "administration_assign_user_to_group",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "administration_create_group",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "administration_create_permission_set",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "administration_create_user",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "bug_client",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "customer",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "kanban_board",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "kanban_card",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "organisation",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "project",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "request_for_change",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "requirement",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "task",
                    models.IntegerField(
                        choices=[
                            (0, "No Permission"),
                            (1, "Read Only"),
                            (2, "Edit Only"),
                            (3, "Add and Edit"),
                            (4, "Full Permission"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "document",
                    models.IntegerField(
                        choices=[(0, "No Permission"), (1, "Has Permission")], default=0
                    ),
                ),
                (
                    "kanban_comment",
                    models.IntegerField(
                        choices=[(0, "No Permission"), (1, "Has Permission")], default=0
                    ),
                ),
                (
                    "project_history",
                    models.IntegerField(
                        choices=[(0, "No Permission"), (1, "Has Permission")], default=0
                    ),
                ),
                (
                    "task_history",
                    models.IntegerField(
                        choices=[(0, "No Permission"), (1, "Has Permission")], default=0
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "permission_set",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("project_id", models.AutoField(primary_key=True, serialize=False)),
                ("project_name", models.CharField(max_length=255)),
                (
                    "project_description",
                    models.TextField(verbose_name="project_description"),
                ),
                ("project_start_date", models.DateTimeField()),
                ("project_end_date", models.DateTimeField()),
                (
                    "project_status",
                    models.CharField(
                        choices=[
                            ("New", "New"),
                            ("Backlog", "Backlog"),
                            ("Blocked", "Blocked"),
                            ("In Progress", "In Progress"),
                            ("Test/Review", "Test/Review"),
                            ("Closed", "Closed"),
                        ],
                        default="New",
                        max_length=15,
                    ),
                ),
                ("project_story_point_min", models.IntegerField(default=1)),
                ("project_story_point_max", models.IntegerField(default=4)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
            ],
            options={
                "db_table": "project",
            },
        ),
        migrations.CreateModel(
            name="RequestForChange",
            fields=[
                ("rfc_id", models.AutoField(primary_key=True, serialize=False)),
                ("rfc_title", models.CharField(max_length=255)),
                ("rfc_summary", models.TextField(verbose_name="rfc_summary")),
                (
                    "rfc_type",
                    models.IntegerField(
                        choices=[
                            (4, "Emergency"),
                            (3, "High"),
                            (2, "Medium"),
                            (1, "Low"),
                        ]
                    ),
                ),
                ("rfc_implementation_start_date", models.DateTimeField()),
                ("rfc_implementation_end_date", models.DateTimeField()),
                ("rfc_implementation_release_date", models.DateTimeField()),
                (
                    "rfc_version_number",
                    models.CharField(blank=True, max_length=25, null=True),
                ),
                (
                    "rfc_priority",
                    models.IntegerField(
                        choices=[
                            (4, "Critical"),
                            (3, "High"),
                            (2, "Medium"),
                            (1, "Low"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "rfc_risk",
                    models.IntegerField(
                        choices=[
                            (5, "Very High"),
                            (4, "High"),
                            (3, "Moderate"),
                            (2, "Low"),
                            (1, "None"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "rfc_impact",
                    models.IntegerField(
                        choices=[(3, "High"), (2, "Medium"), (1, "Low")], default=1
                    ),
                ),
                (
                    "rfc_risk_and_impact_analysis",
                    models.TextField(verbose_name="rfc_risk_and_impact_analysis"),
                ),
                (
                    "rfc_implementation_plan",
                    models.TextField(verbose_name="rfc_implementation_plan"),
                ),
                ("rfc_backout_plan", models.TextField(verbose_name="rfc_backout_plan")),
                ("rfc_test_plan", models.TextField(verbose_name="rfc_test_plan")),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rfc_lead",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="RfcLead",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rfc_status",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofrfcstatus",
                    ),
                ),
            ],
            options={
                "db_table": "request_for_change",
            },
        ),
        migrations.CreateModel(
            name="Requirement",
            fields=[
                ("requirement_id", models.AutoField(primary_key=True, serialize=False)),
                ("requirement_title", models.CharField(max_length=255)),
                ("requirement_scope", models.TextField(blank=True, default="")),
                ("requirement_story_point_min", models.IntegerField(default=1)),
                ("requirement_story_point_max", models.IntegerField(default=4)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "requirement_status",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofrequirementstatus",
                    ),
                ),
                (
                    "requirement_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofrequirementtype",
                    ),
                ),
            ],
            options={
                "db_table": "requirement",
            },
        ),
        migrations.CreateModel(
            name="RequirementItem",
            fields=[
                (
                    "requirement_item_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("requirement_item_title", models.CharField(max_length=255)),
                ("requirement_item_scope", models.TextField(blank=True, default="")),
                ("ri_story_point_min", models.IntegerField(default=4)),
                ("ri_story_point_max", models.IntegerField(default=10)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
                (
                    "requirement_item_status",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofrequirementitemstatus",
                    ),
                ),
                (
                    "requirement_item_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofrequirementitemtype",
                    ),
                ),
            ],
            options={
                "db_table": "requirement_item",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("tag_id", models.AutoField(primary_key=True, serialize=False)),
                ("tag_name", models.CharField(max_length=50)),
                ("tag_colour", models.CharField(default="#651794", max_length=7)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tag",
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("task_id", models.AutoField(primary_key=True, serialize=False)),
                ("task_short_description", models.CharField(max_length=255)),
                ("task_long_description", models.TextField()),
                ("task_start_date", models.DateTimeField()),
                ("task_end_date", models.DateTimeField()),
                (
                    "task_status",
                    models.CharField(
                        choices=[
                            ("New", "New"),
                            ("Backlog", "Backlog"),
                            ("Blocked", "Blocked"),
                            ("In Progress", "In Progress"),
                            ("Test/Review", "Test/Review"),
                            ("Closed", "Closed"),
                        ],
                        default="New",
                        max_length=15,
                    ),
                ),
                ("task_story_point_min", models.IntegerField(default=4)),
                ("task_story_point_max", models.IntegerField(default=10)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "task_assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "task",
            },
        ),
        migrations.CreateModel(
            name="UserWeblink",
            fields=[
                (
                    "user_weblink_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("user_weblink_url", models.URLField(max_length=255)),
                (
                    "user_weblink_source",
                    models.CharField(
                        choices=[
                            ("Twitter", "Twitter"),
                            ("Facebook", "Facebook"),
                            ("Github", "Github"),
                            ("Gitlab", "Gitlab"),
                            ("Website", "Website"),
                            ("LinkedIn", "LinkedIn"),
                            ("Staff Page", "Staff page"),
                            ("Other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_weblink",
            },
        ),
        migrations.CreateModel(
            name="UserWant",
            fields=[
                ("user_want_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "want_choice",
                    models.CharField(
                        choices=[("0", "Do not want to do"), ("1", "Want to do")],
                        max_length=50,
                    ),
                ),
                ("want_choice_text", models.CharField(max_length=50)),
                (
                    "want_skill",
                    models.CharField(
                        choices=[
                            ("0", "Can not do"),
                            ("1", "Willing to learn"),
                            ("2", "Knows a little"),
                            ("3", "Knows a lot"),
                            ("4", "Proficient"),
                        ],
                        max_length=50,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_want",
            },
        ),
        migrations.CreateModel(
            name="UserGroup",
            fields=[
                ("user_group_id", models.AutoField(primary_key=True, serialize=False)),
                ("group_leader", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.group",
                    ),
                ),
                (
                    "permission_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.permissionset",
                    ),
                ),
                (
                    "report_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report_to",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_group",
            },
        ),
        migrations.CreateModel(
            name="ToDo",
            fields=[
                ("to_do_id", models.AutoField(primary_key=True, serialize=False)),
                ("to_do", models.CharField(max_length=255)),
                ("to_do_completed", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "to_do",
            },
        ),
        migrations.CreateModel(
            name="Timesheet",
            fields=[
                ("timesheet_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "timesheet_description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("timesheet_date", models.DateField()),
                ("timesheet_start_time", models.TimeField()),
                ("timesheet_end_time", models.TimeField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "requirement_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirementitem",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "timesheet",
            },
        ),
        migrations.CreateModel(
            name="TaskCustomer",
            fields=[
                (
                    "task_customer_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "customer_description",
                    models.CharField(blank=True, max_length=155, null=True),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="NearBeach.task"
                    ),
                ),
            ],
            options={
                "db_table": "task_customer",
            },
        ),
        migrations.CreateModel(
            name="TaskAction",
            fields=[
                ("task_action_id", models.AutoField(primary_key=True, serialize=False)),
                ("task_action", models.TextField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submitted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="NearBeach.task"
                    ),
                ),
            ],
            options={
                "db_table": "task_action",
            },
        ),
        migrations.CreateModel(
            name="TagAssignment",
            fields=[
                (
                    "tag_assignment_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "object_enum",
                    models.CharField(
                        choices=[
                            ("requirement", "Requirement"),
                            ("RequirementItem", "Requirement Item"),
                            ("project", "Project"),
                            ("task", "Task"),
                            ("KanbanBoard", "Kanban Board"),
                            ("KanbanCard", "Kanban Card"),
                            ("RequestForChange", "Request for Change"),
                            ("customer", "Customer"),
                            ("organisation", "Organisation"),
                        ],
                        default="requirement",
                        max_length=40,
                    ),
                ),
                ("object_id", models.IntegerField(default=0)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="NearBeach.tag"
                    ),
                ),
            ],
            options={
                "db_table": "tag_assignment",
            },
        ),
        migrations.CreateModel(
            name="RequirementCustomer",
            fields=[
                (
                    "requirement_customer_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
            ],
            options={
                "db_table": "requirement_customer",
            },
        ),
        migrations.CreateModel(
            name="RequestForChangeStakeholder",
            fields=[
                (
                    "rfc_stakeholder_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "request_for_change",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requestforchange",
                    ),
                ),
            ],
            options={
                "db_table": "request_for_change_stakeholder",
            },
        ),
        migrations.CreateModel(
            name="RequestForChangeNote",
            fields=[
                ("rfc_note_id", models.AutoField(primary_key=True, serialize=False)),
                ("rfc_note", models.TextField(blank=True, default="")),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "request_for_change_note",
            },
        ),
        migrations.CreateModel(
            name="RequestForChangeGroupApproval",
            fields=[
                (
                    "rfc_group_approval_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "approval",
                    models.IntegerField(
                        choices=[
                            (1, "Waiting"),
                            (2, "Approved"),
                            (3, "Rejected"),
                            (4, "Cancel"),
                        ],
                        default=1,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.group",
                    ),
                ),
                (
                    "rfc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requestforchange",
                    ),
                ),
            ],
            options={
                "db_table": "request_for_change_group_approval",
            },
        ),
        migrations.CreateModel(
            name="ProjectCustomer",
            fields=[
                (
                    "project_customer_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "customer_description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
            ],
            options={
                "db_table": "project_customer",
            },
        ),
        migrations.CreateModel(
            name="ObjectNote",
            fields=[
                ("object_note_id", models.AutoField(primary_key=True, serialize=False)),
                ("object_note", models.TextField(default="")),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "kanban_card",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.kanbancard",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "request_for_change",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requestforchange",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
                (
                    "requirement_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirementitem",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "object_note",
            },
        ),
        migrations.CreateModel(
            name="ObjectAssignment",
            fields=[
                (
                    "object_assignment_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("meta_object", models.BigIntegerField(blank=True, null=True)),
                (
                    "meta_object_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "meta_object_status",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "assigned_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_assigned_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "group_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.group",
                    ),
                ),
                (
                    "kanban_board",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.kanbanboard",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "request_for_change",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requestforchange",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
                (
                    "requirement_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirementitem",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "object_assignment",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "notification_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("notification_header", models.CharField(max_length=255)),
                ("notification_message", models.TextField(blank=True, default="")),
                ("notification_start_date", models.DateTimeField()),
                ("notification_end_date", models.DateTimeField()),
                (
                    "notification_location",
                    models.CharField(
                        choices=[
                            ("All", "All"),
                            ("Login", "Login"),
                            ("Dashboard", "Dashboard"),
                        ],
                        default="All",
                        max_length=20,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notification",
            },
        ),
        migrations.CreateModel(
            name="NearbeachOption",
            fields=[
                (
                    "nearbeach_option_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("story_point_hour_min", models.IntegerField(default=4)),
                ("story_point_hour_max", models.IntegerField(default=10)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "nearbeach_option",
            },
        ),
        migrations.CreateModel(
            name="ListOfTitle",
            fields=[
                ("title_id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=10)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_title",
            },
        ),
        migrations.CreateModel(
            name="ListOfTax",
            fields=[
                ("tax_id", models.AutoField(primary_key=True, serialize=False)),
                ("tax_amount", models.DecimalField(decimal_places=4, max_digits=6)),
                (
                    "tax_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_tax",
            },
        ),
        migrations.CreateModel(
            name="ListOfCurrency",
            fields=[
                ("currency_id", models.AutoField(primary_key=True, serialize=False)),
                ("currency_description", models.CharField(max_length=20)),
                ("currency_short_description", models.CharField(max_length=4)),
                ("list_order", models.IntegerField(unique=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_currency",
            },
        ),
        migrations.CreateModel(
            name="ListOfCountryRegion",
            fields=[
                ("region_id", models.AutoField(primary_key=True, serialize=False)),
                ("region_name", models.CharField(max_length=150)),
                (
                    "region_type",
                    models.CharField(blank=True, default="", max_length=80, null=True),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofcountry",
                    ),
                ),
            ],
            options={
                "db_table": "list_of_country_region",
            },
        ),
        migrations.CreateModel(
            name="ListOfContactType",
            fields=[
                (
                    "contact_type_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("contact_type", models.CharField(max_length=50)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_contact_type",
            },
        ),
        migrations.CreateModel(
            name="ListOfBugClient",
            fields=[
                (
                    "list_of_bug_client_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("bug_client_name", models.CharField(max_length=50)),
                ("bug_client_api_url", models.CharField(max_length=255)),
                ("api_open_bugs", models.CharField(max_length=255)),
                ("api_search_bugs", models.CharField(max_length=255)),
                ("api_bug", models.CharField(max_length=255)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_bug_client",
            },
        ),
        migrations.CreateModel(
            name="ListOfAmountType",
            fields=[
                ("amount_type_id", models.AutoField(primary_key=True, serialize=False)),
                ("amount_type_description", models.CharField(max_length=20)),
                ("list_order", models.IntegerField(unique=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "list_of_amount_type",
                "ordering": ["list_order"],
            },
        ),
        migrations.CreateModel(
            name="Kudos",
            fields=[
                (
                    "kudos_key",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "kudos_rating",
                    models.IntegerField(
                        choices=[
                            (1, "1 Star"),
                            (2, "2 Star"),
                            (3, "3 Star"),
                            (4, "4 Star"),
                            (5, "5 Star"),
                        ],
                        default=0,
                    ),
                ),
                ("improvement_note", models.TextField(blank=True, default="")),
                ("liked_note", models.TextField(blank=True, default="")),
                ("submitted_kudos", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "extra_kudos",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
            ],
            options={
                "db_table": "kudos",
            },
        ),
        migrations.CreateModel(
            name="KanbanLevel",
            fields=[
                (
                    "kanban_level_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("kanban_level_name", models.CharField(max_length=255)),
                ("kanban_level_sort_number", models.IntegerField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "kanban_board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.kanbanboard",
                    ),
                ),
            ],
            options={
                "db_table": "kanban_level",
            },
        ),
        migrations.CreateModel(
            name="KanbanColumn",
            fields=[
                (
                    "kanban_column_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("kanban_column_name", models.CharField(max_length=255)),
                ("kanban_column_sort_number", models.IntegerField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "kanban_board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.kanbanboard",
                    ),
                ),
            ],
            options={
                "db_table": "kanban_column",
            },
        ),
        migrations.AddField(
            model_name="kanbancard",
            name="kanban_column",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="NearBeach.kanbancolumn"
            ),
        ),
        migrations.AddField(
            model_name="kanbancard",
            name="kanban_level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="NearBeach.kanbanlevel"
            ),
        ),
        migrations.AddField(
            model_name="kanbancard",
            name="project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.project",
            ),
        ),
        migrations.AddField(
            model_name="kanbancard",
            name="requirement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.requirement",
            ),
        ),
        migrations.AddField(
            model_name="kanbancard",
            name="task",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.task",
            ),
        ),
        migrations.AddField(
            model_name="kanbanboard",
            name="requirement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.requirement",
            ),
        ),
        migrations.CreateModel(
            name="GroupPermission",
            fields=[
                (
                    "group_permission_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.group",
                    ),
                ),
                (
                    "permission_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.permissionset",
                    ),
                ),
            ],
            options={
                "db_table": "group_permission",
            },
        ),
        migrations.CreateModel(
            name="Folder",
            fields=[
                ("folder_id", models.AutoField(primary_key=True, serialize=False)),
                ("folder_description", models.CharField(max_length=255)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "parent_folder",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.folder",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "request_for_change",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requestforchange",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
                (
                    "requirement_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirementitem",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "folder",
            },
        ),
        migrations.CreateModel(
            name="EmailContent",
            fields=[
                (
                    "email_content_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("email_subject", models.CharField(max_length=255)),
                ("email_content", models.TextField(verbose_name="email_content")),
                ("is_private", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "email_content",
            },
        ),
        migrations.CreateModel(
            name="EmailContact",
            fields=[
                (
                    "email_contact_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("is_private", models.BooleanField(default=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "bcc_customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_bcc_customer",
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "cc_customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_cc_customer",
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "email_content",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.emailcontent",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
                (
                    "to_customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_to_customer",
                        to="NearBeach.customer",
                    ),
                ),
            ],
            options={
                "db_table": "email_contact",
            },
        ),
        migrations.CreateModel(
            name="DocumentPermission",
            fields=[
                (
                    "document_permisssion_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "document_key",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.document",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.folder",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "request_for_change",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requestforchange",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
                (
                    "requirement_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirementitem",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "document_permission",
            },
        ),
        migrations.CreateModel(
            name="CustomerCampus",
            fields=[
                (
                    "customer_campus_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("customer_phone", models.CharField(max_length=20)),
                ("customer_fax", models.CharField(max_length=20)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "campus",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.campus",
                    ),
                ),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
            ],
            options={
                "db_table": "customer_campus",
            },
        ),
        migrations.AddField(
            model_name="customer",
            name="customer_profile_picture",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.document",
            ),
        ),
        migrations.AddField(
            model_name="customer",
            name="customer_title",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="NearBeach.listoftitle"
            ),
        ),
        migrations.AddField(
            model_name="customer",
            name="organisation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.organisation",
            ),
        ),
        migrations.CreateModel(
            name="Cost",
            fields=[
                ("cost_id", models.AutoField(primary_key=True, serialize=False)),
                ("cost_description", models.CharField(max_length=255)),
                ("cost_amount", models.DecimalField(decimal_places=2, max_digits=19)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "cost",
            },
        ),
        migrations.CreateModel(
            name="ContactHistory",
            fields=[
                (
                    "contact_history_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("contact_date", models.DateTimeField()),
                ("contact_history", models.TextField(verbose_name="contact_history")),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "contact_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofcontacttype",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.customer",
                    ),
                ),
                (
                    "document_key",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.document",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.organisation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "contact_history",
            },
        ),
        migrations.CreateModel(
            name="ChangeTaskBlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "blocked_change_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blocked_change_task",
                        to="NearBeach.changetask",
                    ),
                ),
                (
                    "change_task_blocks",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_task_blocks",
                        to="NearBeach.changetask",
                    ),
                ),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creation_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_creation_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "change_task_block",
            },
        ),
        migrations.AddField(
            model_name="changetask",
            name="request_for_change",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.requestforchange",
            ),
        ),
        migrations.AddField(
            model_name="campus",
            name="campus_country",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.listofcountry",
            ),
        ),
        migrations.AddField(
            model_name="campus",
            name="campus_region",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.listofcountryregion",
            ),
        ),
        migrations.AddField(
            model_name="campus",
            name="change_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_change_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="campus",
            name="customer",
            field=models.ForeignKey(
                blank=True,
                default="",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.customer",
            ),
        ),
        migrations.AddField(
            model_name="campus",
            name="organisation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="NearBeach.organisation",
            ),
        ),
        migrations.CreateModel(
            name="BugClient",
            fields=[
                ("bug_client_id", models.AutoField(primary_key=True, serialize=False)),
                ("bug_client_name", models.CharField(max_length=50)),
                ("bug_client_url", models.URLField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list_of_bug_client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.listofbugclient",
                    ),
                ),
            ],
            options={
                "db_table": "bug_client",
            },
        ),
        migrations.CreateModel(
            name="Bug",
            fields=[
                ("bug_id", models.AutoField(primary_key=True, serialize=False)),
                ("bug_code", models.CharField(max_length=255)),
                ("bug_description", models.TextField()),
                ("bug_status", models.CharField(max_length=50)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "bug_client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.bugclient",
                    ),
                ),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.project",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.requirement",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="NearBeach.task",
                    ),
                ),
            ],
            options={
                "db_table": "bug",
            },
        ),
        migrations.CreateModel(
            name="AboutUser",
            fields=[
                ("about_user_id", models.AutoField(primary_key=True, serialize=False)),
                ("about_user_text", models.TextField(blank=True, default="")),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "change_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_change_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "about_user",
            },
        ),
    ]
